{"version":3,"sources":["components/box.jsx","components/turn.jsx","components/board.jsx","components/app.jsx","serviceWorker.js","index.js"],"names":["Box","onClick","this","props","currentPiece","Component","Turn","className","changeDisplay","currentState","Board","state","boxes","id","value","filledBoxesCount","pieces","turn","handleBoxClick","slice","box","setState","checkState","renderPiece","lastPiece","row","length","box1","box2","box3","col","Math","floor","leftDiag","rightDiag","checkRow","checkColumn","checkDiag","Fragment","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be7b8bcb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n// Box component to render each individual box on the web application\r\nclass Box extends Component {\r\n    \r\n\r\n    render() { \r\n        return ( \r\n            <div \r\n                onClick={this.props.onClick}\r\n            >\r\n                {this.props.currentPiece}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Box;","import React, { Component } from 'react';\r\n\r\nclass Turn extends Component {\r\n    \r\n    render() { \r\n        return (\r\n            <div className=\"display\">\r\n                <p>{ this.changeDisplay() }</p>\r\n            </div> \r\n        );\r\n    }\r\n\r\n    // displays current state of the game\r\n    changeDisplay() {\r\n        if (this.props.currentState === 0) {\r\n            return `${this.props.currentPiece}'s turn!`;\r\n        } else if (this.props.currentState === 1) {\r\n            return `${this.props.currentPiece} wins!`;\r\n        } else {\r\n            return `Draw!`;\r\n        }\r\n    }\r\n    \r\n}\r\n \r\nexport default Turn;","import React, { Component} from 'react';\r\nimport Box from './box';\r\nimport Turn from './turn';\r\n\r\n\r\nclass Board extends Component {\r\n    /* \r\n        current state of the board; contains the boxes, the number of filled boxes,\r\n        the available pieces, current turn, and current state of the\r\n    */\r\n    state = { \r\n        boxes: [\r\n            { id: 0, value: \"\"},\r\n            { id: 1, value: \"\"},\r\n            { id: 2, value: \"\"},\r\n            { id: 3, value: \"\"},\r\n            { id: 4, value: \"\"},\r\n            { id: 5, value: \"\"},\r\n            { id: 6, value: \"\"},\r\n            { id: 7, value: \"\"},\r\n            { id: 8, value: \"\"}\r\n        ],\r\n        filledBoxesCount: 0,\r\n        pieces: [\r\n            'X',\r\n            'O'\r\n        ],\r\n        turn: 0,\r\n        currentState: 0\r\n     };\r\n\r\n    // binding every box component with this onclick function\r\n    handleBoxClick = (id) => {\r\n        const boxes = this.state.boxes.slice();\r\n        let box = boxes[id];\r\n        let currentPiece = this.state.pieces[this.state.turn % 2]\r\n\r\n        // if the state of the game is already decided then stop the game\r\n        if (this.state.currentState !== 0) return;\r\n        \r\n        if (box.value === \"\") {\r\n            box.value = currentPiece;\r\n            this.setState({ boxes: boxes } );\r\n            this.setState({ filledBoxesCount: this.state.filledBoxesCount + 1})\r\n            this.checkState(currentPiece);\r\n        }\r\n    };\r\n\r\n    // returns updated piece for the clicked box\r\n    renderPiece = (id) => {\r\n        let box = this.state.boxes[id];\r\n        return box.value;\r\n    }\r\n\r\n\r\n    /*\r\n        checkRow: checks each row of the board\r\n        checkColumn: checks each column of the board\r\n        checkDiag: checks the left and right diagonals of the board\r\n        checkState: calls the above three mentioned functions plus checks \r\n                amount of filled boxes\r\n    */\r\n\r\n    checkRow (lastPiece) {\r\n        // row represents the current row\r\n        for (let row = 0; row < this.state.boxes.length; row += 3) {\r\n            let box1 = this.state.boxes[row], box2 = this.state.boxes[row + 1],\r\n                box3 = this.state.boxes[row + 2];\r\n            if (box1.value === lastPiece && box2.value === lastPiece &&\r\n                box3.value === lastPiece) \r\n                return true;\r\n        }  \r\n        return false;\r\n    }\r\n\r\n    checkColumn (lastPiece) { \r\n        // col represents the current column\r\n        for (let col = 0; col < Math.floor(this.state.boxes.length / 3);\r\n                 col += 1) {\r\n            let box1 = this.state.boxes[col], box2 = this.state.boxes[col + 3],\r\n                box3 = this.state.boxes[col + 6];\r\n            if (box1.value === lastPiece && box2.value === lastPiece &&\r\n                box3.value === lastPiece) \r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    checkDiag (lastPiece) {\r\n        // leftDiag is the left diagonal of the board, rightDiag is the right diagonal\r\n        let leftDiag = this.state.boxes[0].value === lastPiece &&\r\n                        this.state.boxes[4].value === lastPiece && \r\n                        this.state.boxes[8].value === lastPiece;\r\n        let rightDiag = this.state.boxes[2].value === lastPiece &&\r\n                         this.state.boxes[4].value === lastPiece &&\r\n                         this.state.boxes[6].value === lastPiece;\r\n        return leftDiag || rightDiag;\r\n    }\r\n\r\n    checkState (lastPiece) {\r\n        if (this.checkRow(lastPiece) || this.checkColumn(lastPiece) || \r\n            this.checkDiag(lastPiece) ){\r\n            this.setState( {currentState: 1} );\r\n        } else if (this.state.filledBoxesCount === this.state.boxes.length - 1) {\r\n            this.setState( {currentState: -1});\r\n        } else {\r\n            this.setState({ turn: this.state.turn + 1});\r\n        }\r\n    }\r\n\r\n    \r\n    // renders turn component and board with boxes components\r\n    render() { \r\n        return ( \r\n            <React.Fragment>\r\n                <Turn \r\n                    currentPiece={this.state.pieces[this.state.turn % 2]}\r\n                    currentState={this.state.currentState}\r\n                />\r\n                <div \r\n                    className=\"board\" \r\n                >\r\n                    {this.state.boxes.map( box => <Box \r\n                                                key={box.id} \r\n                                                onClick={() => this.handleBoxClick(box.id)}\r\n                                                currentPiece={this.renderPiece(box.id)}/>)}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\n \r\nexport default Board;","import React, { Component } from 'react';\r\nimport Board from './board';\r\n\r\nclass App extends Component { \r\n\r\n    render() { \r\n        return (\r\n            <React.Fragment>\r\n                <header>\r\n                    <h1>Tic Tac Toe!</h1>\r\n                </header>\r\n                <Board />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n \r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}